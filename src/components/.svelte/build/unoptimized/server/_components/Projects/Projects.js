import './Projects.css.proxy.js';
/* src/components/Projects/Projects.svelte generated by Svelte v3.31.2 */
import { create_ssr_component, each, validate_component } from "../../web_modules/svelte/internal.js";

import generateImage from "../../generateImage.js";
import client from "../../sanityClient.js";
import Project from "./Project.js";

const css = {
	code: ".projectsWrapper.svelte-le92zs.svelte-le92zs{background-color:var(--black);padding:0.5rem var(--padding) 1rem var(--padding)}.projectsWrapper.svelte-le92zs h1.svelte-le92zs{font-size:3rem;background:var(--purpletoyellow);-webkit-background-clip:text;background-clip:text;-webkit-text-fill-color:transparent}.projectsGrid.svelte-le92zs.svelte-le92zs{display:flex;flex-wrap:wrap;gap:10px;margin:0 -2rem}",
	map: "{\"version\":3,\"file\":\"Projects.svelte\",\"sources\":[\"Projects.svelte\"],\"sourcesContent\":[\"<script context=\\\"module\\\">\\n  import client from '../../sanityClient'\\n\\timport generateImage from '../../generateImage'\\n\\n\\texport async function preload({ params }) {\\n\\t\\tconst GROQ_QUERY = `\\n\\t\\t\\t*[_type == 'project'][0]{\\n        description\\n        link\\n        gitLink\\n        image {..., asset->}\\n        title\\n\\t\\t\\t}\\n\\t\\t`\\n\\n\\t\\tconst data = await client\\n\\t\\t\\t.fetch(GROQ_QUERY)\\n      .catch((err) => this.error(500, err))\\n      \\n    console.log(data);\\n\\n\\t\\t// Transform the image data\\n\\t\\tdata.image = generateImage(data.image)\\n\\n\\t\\treturn { data }\\n\\t}\\n</script>\\n\\n<script>\\n  import Project from '$components/Projects/Project'\\n\\n  export let data;\\n</script>\\n\\n<div class=\\\"projectsWrapper\\\">\\n  <h1>Projects</h1>\\n  <div class=\\\"projectsGrid\\\">\\n    {#each data as project}\\n      <Project {...project} />\\n    {/each}\\n  </div>\\n</div>\\n\\n<style>\\n  .projectsWrapper {\\n    background-color: var(--black);\\n    padding: 0.5rem var(--padding) 1rem var(--padding);\\n  }\\n\\n  .projectsWrapper h1 {\\n    font-size: 3rem;\\n    background: var(--purpletoyellow);\\n    -webkit-background-clip: text;\\n    background-clip: text;\\n    -webkit-text-fill-color: transparent;\\n  }\\n\\n  .projectsGrid {\\n    display: flex;\\n    flex-wrap: wrap;\\n    gap: 10px;\\n    margin: 0 -2rem;\\n  }\\n</style>\"],\"names\":[],\"mappings\":\"AA4CE,gBAAgB,4BAAC,CAAC,AAChB,gBAAgB,CAAE,IAAI,OAAO,CAAC,CAC9B,OAAO,CAAE,MAAM,CAAC,IAAI,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,AACpD,CAAC,AAED,8BAAgB,CAAC,EAAE,cAAC,CAAC,AACnB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,gBAAgB,CAAC,CACjC,uBAAuB,CAAE,IAAI,CAC7B,eAAe,CAAE,IAAI,CACrB,uBAAuB,CAAE,WAAW,AACtC,CAAC,AAED,aAAa,4BAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,GAAG,CAAE,IAAI,CACT,MAAM,CAAE,CAAC,CAAC,KAAK,AACjB,CAAC\"}"
};

async function preload({ params }) {
	const GROQ_QUERY = `
			*[_type == 'project'][0]{
        description
        link
        gitLink
        image {..., asset->}
        title
			}
		`;

	const data = await client.fetch(GROQ_QUERY).catch(err => this.error(500, err));
	console.log(data);

	// Transform the image data
	data.image = generateImage(data.image);

	return { data };
}

const Projects = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { data } = $$props;
	if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
	$$result.css.add(css);

	return `<div class="${"projectsWrapper svelte-le92zs"}"><h1 class="${"svelte-le92zs"}">Projects</h1>
  <div class="${"projectsGrid svelte-le92zs"}">${each(data, project => `${validate_component(Project, "Project").$$render($$result, Object.assign(project), {}, {})}`)}</div>
</div>`;
});

export default Projects;
export { preload };
//# sourceMappingURL=Projects.js.map
