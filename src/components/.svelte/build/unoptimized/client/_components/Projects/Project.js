import './Project.css.proxy.js';
/* src/components/Projects/Project.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	is_function,
	noop,
	safe_not_equal,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import cssVars from "../../web_modules/svelte-css-vars.js";
import urlFor from "../../sanityImageUrlBuilder.js";

function create_fragment(ctx) {
	let div1;
	let section0;
	let h3;
	let t0;
	let t1;
	let h4;
	let t2;
	let t3;
	let p;
	let t4;
	let t5;
	let section1;
	let div0;
	let a0;
	let t6;
	let t7;
	let a1;
	let t8;
	let cssVars_action;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			section0 = element("section");
			h3 = element("h3");
			t0 = text(/*title*/ ctx[4]);
			t1 = space();
			h4 = element("h4");
			t2 = text("Description");
			t3 = space();
			p = element("p");
			t4 = text(/*description*/ ctx[1]);
			t5 = space();
			section1 = element("section");
			div0 = element("div");
			a0 = element("a");
			t6 = text("Project Link");
			t7 = space();
			a1 = element("a");
			t8 = text("GitHub Link");
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			section0 = claim_element(div1_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			h3 = claim_element(section0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, /*title*/ ctx[4]);
			h3_nodes.forEach(detach);
			t1 = claim_space(section0_nodes);
			h4 = claim_element(section0_nodes, "H4", {});
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, "Description");
			h4_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t3 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, /*description*/ ctx[1]);
			p_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			section1 = claim_element(div1_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div0 = claim_element(section1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			a0 = claim_element(div0_nodes, "A", {
				href: true,
				target: true,
				rel: true,
				class: true
			});

			var a0_nodes = children(a0);
			t6 = claim_text(a0_nodes, "Project Link");
			a0_nodes.forEach(detach);
			t7 = claim_space(div0_nodes);

			a1 = claim_element(div0_nodes, "A", {
				href: true,
				target: true,
				rel: true,
				class: true
			});

			var a1_nodes = children(a1);
			t8 = claim_text(a1_nodes, "GitHub Link");
			a1_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "svelte-h4ukb3");
			attr(section0, "class", "titles");
			attr(a0, "href", /*link*/ ctx[2]);
			attr(a0, "target", "_blank");
			attr(a0, "rel", "noopener noreferrer");
			attr(a0, "class", "svelte-h4ukb3");
			attr(a1, "href", /*gitLink*/ ctx[3]);
			attr(a1, "target", "_blank");
			attr(a1, "rel", "noopener noreferrer");
			attr(a1, "class", "svelte-h4ukb3");
			attr(div0, "class", "links svelte-h4ukb3");
			attr(section1, "class", "footer");
			attr(div1, "class", "project");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, section0);
			append(section0, h3);
			append(h3, t0);
			append(section0, t1);
			append(section0, h4);
			append(h4, t2);
			append(div1, t3);
			append(div1, p);
			append(p, t4);
			append(div1, t5);
			append(div1, section1);
			append(section1, div0);
			append(div0, a0);
			append(a0, t6);
			append(div0, t7);
			append(div0, a1);
			append(a1, t8);

			if (!mounted) {
				dispose = action_destroyer(cssVars_action = cssVars.call(null, div1, /*styleVars*/ ctx[0]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (cssVars_action && is_function(cssVars_action.update) && dirty & /*styleVars*/ 1) cssVars_action.update.call(null, /*styleVars*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let styleVars;
	let { project } = $$props;
	const { description, link, gitLink, image, title } = project;

	$$self.$$set = $$props => {
		if ("project" in $$props) $$invalidate(5, project = $$props.project);
	};

	$: $$invalidate(0, styleVars = { cssImage: urlFor(image) });
	return [styleVars, description, link, gitLink, title, project];
}

class Project extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { project: 5 });
	}
}

export default Project;
//# sourceMappingURL=Project.js.map
