import './Projects.css.proxy.js';
/* src/components/Projects/Projects.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import generateImage from "../../generateImage.js";
import client from "../../sanityClient.js";
import Project from "./Project.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (38:4) {#each data as project}
function create_each_block(ctx) {
	let project;
	let current;
	const project_spread_levels = [/*project*/ ctx[1]];
	let project_props = {};

	for (let i = 0; i < project_spread_levels.length; i += 1) {
		project_props = assign(project_props, project_spread_levels[i]);
	}

	project = new Project({ props: project_props });

	return {
		c() {
			create_component(project.$$.fragment);
		},
		l(nodes) {
			claim_component(project.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(project, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const project_changes = (dirty & /*data*/ 1)
			? get_spread_update(project_spread_levels, [get_spread_object(/*project*/ ctx[1])])
			: {};

			project.$set(project_changes);
		},
		i(local) {
			if (current) return;
			transition_in(project.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(project.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(project, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let h1;
	let t0;
	let t1;
	let div0;
	let current;
	let each_value = /*data*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div1 = element("div");
			h1 = element("h1");
			t0 = text("Projects");
			t1 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Projects");
			h1_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-le92zs");
			attr(div0, "class", "projectsGrid svelte-le92zs");
			attr(div1, "class", "projectsWrapper svelte-le92zs");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h1);
			append(h1, t0);
			append(div1, t1);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*data*/ 1) {
				each_value = /*data*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

async function preload({ params }) {
	const GROQ_QUERY = `
			*[_type == 'project'][0]{
        description
        link
        gitLink
        image {..., asset->}
        title
			}
		`;

	const data = await client.fetch(GROQ_QUERY).catch(err => this.error(500, err));
	console.log(data);

	// Transform the image data
	data.image = generateImage(data.image);

	return { data };
}

function instance($$self, $$props, $$invalidate) {
	let { data } = $$props;

	$$self.$$set = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
	};

	return [data];
}

class Projects extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { data: 0 });
	}
}

export default Projects;
export { preload };
//# sourceMappingURL=Projects.js.map
