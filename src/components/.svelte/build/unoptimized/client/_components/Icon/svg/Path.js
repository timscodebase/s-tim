/* src/components/Icon/svg/Path.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	assign,
	children,
	claim_element,
	detach,
	get_spread_update,
	init,
	insert,
	noop,
	safe_not_equal,
	set_svg_attributes,
	svg_element
} from "../../../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let path;
	let path_key_value;

	let path_levels = [
		{
			key: path_key_value = "path-" + /*id*/ ctx[0]
		},
		/*data*/ ctx[1]
	];

	let path_data = {};

	for (let i = 0; i < path_levels.length; i += 1) {
		path_data = assign(path_data, path_levels[i]);
	}

	return {
		c() {
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			path = claim_element(nodes, "path", { key: true }, 1);
			children(path).forEach(detach);
			this.h();
		},
		h() {
			set_svg_attributes(path, path_data);
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		p(ctx, [dirty]) {
			set_svg_attributes(path, path_data = get_spread_update(path_levels, [
				dirty & /*id*/ 1 && path_key_value !== (path_key_value = "path-" + /*id*/ ctx[0]) && { key: path_key_value },
				dirty & /*data*/ 2 && /*data*/ ctx[1]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id = "" } = $$props;
	let { data = {} } = $$props;

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("data" in $$props) $$invalidate(1, data = $$props.data);
	};

	return [id, data];
}

class Path extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 0, data: 1 });
	}
}

export default Path;
//# sourceMappingURL=Path.js.map
