/* src/components/Icon/svg/Raw.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	children,
	claim_element,
	detach,
	init,
	insert,
	noop,
	safe_not_equal,
	svg_element
} from "../../../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let g;

	return {
		c() {
			g = svg_element("g");
		},
		l(nodes) {
			g = claim_element(nodes, "g", {}, 1);
			var g_nodes = children(g);
			g_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, g, anchor);
			g.innerHTML = /*raw*/ ctx[0];
		},
		p(ctx, [dirty]) {
			if (dirty & /*raw*/ 1) g.innerHTML = /*raw*/ ctx[0];;
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(g);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let cursor = 870711;

	function getId() {
		cursor += 1;
		return `fa-${cursor.toString(16)}`;
	}

	let raw;
	let { data } = $$props;

	function getRaw(data) {
		if (!data || !data.raw) {
			return null;
		}

		let rawData = data.raw;
		const ids = {};

		rawData = rawData.replace(/\s(?:xml:)?id=["']?([^"')\s]+)/g, (match, id) => {
			const uniqueId = getId();
			ids[id] = uniqueId;
			return ` id="${uniqueId}"`;
		});

		rawData = rawData.replace(/#(?:([^'")\s]+)|xpointer\(id\((['"]?)([^')]+)\2\)\))/g, (match, rawId, _, pointerId) => {
			const id = rawId || pointerId;

			if (!id || !ids[id]) {
				return match;
			}

			return `#${ids[id]}`;
		});

		return rawData;
	}

	$$self.$$set = $$props => {
		if ("data" in $$props) $$invalidate(1, data = $$props.data);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*data*/ 2) {
			$: $$invalidate(0, raw = getRaw(data));
		}
	};

	return [raw, data];
}

class Raw extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { data: 1 });
	}
}

export default Raw;
//# sourceMappingURL=Raw.js.map
