import './Svg.css.proxy.js';
/* src/components/Icon/svg/Svg.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	attr,
	children,
	claim_element,
	create_slot,
	detach,
	init,
	insert,
	safe_not_equal,
	svg_element,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "../../../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let svg;
	let svg_class_value;
	let svg_role_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			svg = svg_element("svg");
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					version: true,
					class: true,
					x: true,
					y: true,
					width: true,
					height: true,
					"aria-label": true,
					role: true,
					viewBox: true,
					style: true
				},
				1
			);

			var svg_nodes = children(svg);
			if (default_slot) default_slot.l(svg_nodes);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(svg, "version", "1.1");
			attr(svg, "class", svg_class_value = "fa-icon " + /*className*/ ctx[0] + " svelte-1dof0an");
			attr(svg, "x", /*x*/ ctx[8]);
			attr(svg, "y", /*y*/ ctx[9]);
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "height", /*height*/ ctx[2]);
			attr(svg, "aria-label", /*label*/ ctx[11]);
			attr(svg, "role", svg_role_value = /*label*/ ctx[11] ? "img" : "presentation");
			attr(svg, "viewBox", /*box*/ ctx[3]);
			attr(svg, "style", /*style*/ ctx[10]);
			toggle_class(svg, "fa-spin", /*spin*/ ctx[4]);
			toggle_class(svg, "fa-pulse", /*pulse*/ ctx[6]);
			toggle_class(svg, "fa-inverse", /*inverse*/ ctx[5]);
			toggle_class(svg, "fa-flip-horizontal", /*flip*/ ctx[7] === "horizontal");
			toggle_class(svg, "fa-flip-vertical", /*flip*/ ctx[7] === "vertical");
		},
		m(target, anchor) {
			insert(target, svg, anchor);

			if (default_slot) {
				default_slot.m(svg, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			if (!current || dirty & /*className*/ 1 && svg_class_value !== (svg_class_value = "fa-icon " + /*className*/ ctx[0] + " svelte-1dof0an")) {
				attr(svg, "class", svg_class_value);
			}

			if (!current || dirty & /*x*/ 256) {
				attr(svg, "x", /*x*/ ctx[8]);
			}

			if (!current || dirty & /*y*/ 512) {
				attr(svg, "y", /*y*/ ctx[9]);
			}

			if (!current || dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}

			if (!current || dirty & /*height*/ 4) {
				attr(svg, "height", /*height*/ ctx[2]);
			}

			if (!current || dirty & /*label*/ 2048) {
				attr(svg, "aria-label", /*label*/ ctx[11]);
			}

			if (!current || dirty & /*label*/ 2048 && svg_role_value !== (svg_role_value = /*label*/ ctx[11] ? "img" : "presentation")) {
				attr(svg, "role", svg_role_value);
			}

			if (!current || dirty & /*box*/ 8) {
				attr(svg, "viewBox", /*box*/ ctx[3]);
			}

			if (!current || dirty & /*style*/ 1024) {
				attr(svg, "style", /*style*/ ctx[10]);
			}

			if (dirty & /*className, spin*/ 17) {
				toggle_class(svg, "fa-spin", /*spin*/ ctx[4]);
			}

			if (dirty & /*className, pulse*/ 65) {
				toggle_class(svg, "fa-pulse", /*pulse*/ ctx[6]);
			}

			if (dirty & /*className, inverse*/ 33) {
				toggle_class(svg, "fa-inverse", /*inverse*/ ctx[5]);
			}

			if (dirty & /*className, flip*/ 129) {
				toggle_class(svg, "fa-flip-horizontal", /*flip*/ ctx[7] === "horizontal");
			}

			if (dirty & /*className, flip*/ 129) {
				toggle_class(svg, "fa-flip-vertical", /*flip*/ ctx[7] === "vertical");
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className } = $$props;
	let { width } = $$props;
	let { height } = $$props;
	let { box } = $$props;
	let { spin = false } = $$props;
	let { inverse = false } = $$props;
	let { pulse = false } = $$props;
	let { flip = null } = $$props;
	let { x = undefined } = $$props;
	let { y = undefined } = $$props;
	let { style = undefined } = $$props;
	let { label = undefined } = $$props;

	$$self.$$set = $$props => {
		if ("class" in $$props) $$invalidate(0, className = $$props.class);
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("box" in $$props) $$invalidate(3, box = $$props.box);
		if ("spin" in $$props) $$invalidate(4, spin = $$props.spin);
		if ("inverse" in $$props) $$invalidate(5, inverse = $$props.inverse);
		if ("pulse" in $$props) $$invalidate(6, pulse = $$props.pulse);
		if ("flip" in $$props) $$invalidate(7, flip = $$props.flip);
		if ("x" in $$props) $$invalidate(8, x = $$props.x);
		if ("y" in $$props) $$invalidate(9, y = $$props.y);
		if ("style" in $$props) $$invalidate(10, style = $$props.style);
		if ("label" in $$props) $$invalidate(11, label = $$props.label);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		className,
		width,
		height,
		box,
		spin,
		inverse,
		pulse,
		flip,
		x,
		y,
		style,
		label,
		$$scope,
		slots
	];
}

class Svg extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 0,
			width: 1,
			height: 2,
			box: 3,
			spin: 4,
			inverse: 5,
			pulse: 6,
			flip: 7,
			x: 8,
			y: 9,
			style: 10,
			label: 11
		});
	}
}

export default Svg;
//# sourceMappingURL=Svg.js.map
