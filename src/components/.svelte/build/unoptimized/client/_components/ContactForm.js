import './ContactForm.css.proxy.js';
/* src/components/ContactForm.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text
} from "../web_modules/svelte/internal.js";

import { createForm } from "../web_modules/svelte-forms-lib.js";

function create_fragment(ctx) {
	let form_1;
	let div3;
	let div0;
	let label0;
	let p0;
	let t0;
	let t1;
	let input0;
	let t2;
	let div1;
	let label1;
	let p1;
	let t3;
	let t4;
	let input1;
	let t5;
	let div2;
	let label2;
	let p2;
	let t6;
	let t7;
	let textarea;
	let t8;
	let button;
	let t9;
	let mounted;
	let dispose;

	return {
		c() {
			form_1 = element("form");
			div3 = element("div");
			div0 = element("div");
			label0 = element("label");
			p0 = element("p");
			t0 = text("Your Name:");
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			p1 = element("p");
			t3 = text("Your Email:");
			t4 = space();
			input1 = element("input");
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			p2 = element("p");
			t6 = text("Message:");
			t7 = space();
			textarea = element("textarea");
			t8 = space();
			button = element("button");
			t9 = text("Send");
			this.h();
		},
		l(nodes) {
			form_1 = claim_element(nodes, "FORM", { class: true });
			var form_1_nodes = children(form_1);
			div3 = claim_element(form_1_nodes, "DIV", {});
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", {});
			var div0_nodes = children(div0);
			label0 = claim_element(div0_nodes, "LABEL", { class: true, for: true });
			var label0_nodes = children(label0);
			p0 = claim_element(label0_nodes, "P", { hidden: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Your Name:");
			p0_nodes.forEach(detach);
			t1 = claim_space(label0_nodes);

			input0 = claim_element(label0_nodes, "INPUT", {
				class: true,
				type: true,
				name: true,
				placeholder: true
			});

			label0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", {});
			var div1_nodes = children(div1);
			label1 = claim_element(div1_nodes, "LABEL", { class: true, for: true });
			var label1_nodes = children(label1);
			p1 = claim_element(label1_nodes, "P", { hidden: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Your Email:");
			p1_nodes.forEach(detach);
			t4 = claim_space(label1_nodes);

			input1 = claim_element(label1_nodes, "INPUT", {
				class: true,
				type: true,
				name: true,
				placeholder: true
			});

			label1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			label2 = claim_element(div2_nodes, "LABEL", { class: true, for: true });
			var label2_nodes = children(label2);
			p2 = claim_element(label2_nodes, "P", { hidden: true });
			var p2_nodes = children(p2);
			t6 = claim_text(p2_nodes, "Message:");
			p2_nodes.forEach(detach);
			t7 = claim_space(label2_nodes);

			textarea = claim_element(label2_nodes, "TEXTAREA", {
				class: true,
				name: true,
				placeholder: true
			});

			children(textarea).forEach(detach);
			label2_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t8 = claim_space(form_1_nodes);
			button = claim_element(form_1_nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t9 = claim_text(button_nodes, "Send");
			button_nodes.forEach(detach);
			form_1_nodes.forEach(detach);
			this.h();
		},
		h() {
			p0.hidden = true;
			attr(input0, "class", "input svelte-59rfn3");
			attr(input0, "type", "text");
			attr(input0, "name", "name");
			attr(input0, "placeholder", "Your Name");
			attr(label0, "class", "label svelte-59rfn3");
			attr(label0, "for", "name");
			p1.hidden = true;
			attr(input1, "class", "input svelte-59rfn3");
			attr(input1, "type", "email");
			attr(input1, "name", "email");
			attr(input1, "placeholder", "Your Email");
			attr(label1, "class", "padTop label svelte-59rfn3");
			attr(label1, "for", "email");
			p2.hidden = true;
			attr(textarea, "class", "textarea svelte-59rfn3");
			attr(textarea, "name", "message");
			attr(textarea, "placeholder", "Message");
			attr(label2, "class", "padTop label svelte-59rfn3");
			attr(label2, "for", "message");
			attr(button, "class", "submit svelte-59rfn3");
			attr(button, "type", "submit");
			attr(form_1, "class", "form svelte-59rfn3");
		},
		m(target, anchor) {
			insert(target, form_1, anchor);
			append(form_1, div3);
			append(div3, div0);
			append(div0, label0);
			append(label0, p0);
			append(p0, t0);
			append(label0, t1);
			append(label0, input0);
			append(div3, t2);
			append(div3, div1);
			append(div1, label1);
			append(label1, p1);
			append(p1, t3);
			append(label1, t4);
			append(label1, input1);
			append(div3, t5);
			append(div3, div2);
			append(div2, label2);
			append(label2, p2);
			append(p2, t6);
			append(label2, t7);
			append(label2, textarea);
			append(form_1, t8);
			append(form_1, button);
			append(button, t9);

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*handleChange*/ ctx[0]),
					listen(input1, "change", /*handleChange*/ ctx[0]),
					listen(textarea, "change", /*handleChange*/ ctx[0]),
					listen(form_1, "submit", /*handleSubmit*/ ctx[1])
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(form_1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self) {
	const encode = data => Object.keys(data).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`).join("&");

	const { form, handleChange, handleSubmit } = createForm({
		initialValues: { message: "", name: "", email: "" },
		onSubmit: values => {
			fetch("/", {
				method: "POST",
				headers: {
					"Content-Type": "application/x-www-form-urlencoded"
				},
				body: encode({ "form-name": "contact", values })
			}).then(() => alert("Success!")).catch(error => alert(error));

			e.preventDefault();
		}
	});

	return [handleChange, handleSubmit];
}

class ContactForm extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default ContactForm;
//# sourceMappingURL=ContactForm.js.map
